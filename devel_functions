
gack()
{
   grep --include="$1" -nre "$2" "${3:-.}"
}

#alias ackc="gack '*.c'"
#alias ackh="gack '*.h'"
#alias ack="gack '*.[ch]'"

typedef()
{
   grep -nrPe '(?m)typedef\s+((?=struct)?((?<name>\w+)(?<sbody>\{(?:(?>[^\{\}]+)|(?&sbody))*\})'$1'\s*;)|(?:\w+\s+))+'$1'\s*;' "${2:-.}"
}

struct()
{
   grep -nrPe '(?m)struct\s+'$1'\s*{' "${2:-.}"
}

define()
{
   grep -nrPe '(?m)\#\s*define\s+'$1 "${2:-.}"
}

cgrep()
{
    ack --color -C 2 $@ | less -R
}

kgrep()
{
   IFS=$'\n';
   for i in $(grep -nrPe $1 ${2:-.})
   do
      kwrite $(echo "$i" | cut -d ':' -f 1) --line $(echo "$i" | cut -d ':' -f 2)
   done
}

open_vim()
{
   vim $(echo "$1" | cut -d ':' -f 1) +$(echo "$1" | cut -d ':' -f 2)
}

vgrep()
{
   IFS=$'\n';
   for i in $(grep -nrPe $1 ${2:-.})
   do
      open_vim "$i"
   done
}

vvgrep()
{
   declare -a args=()

   while read
   do
      tag=$(echo "$REPLY" | cut -d ':' -f 1-2)
      item=$(echo "$REPLY" | cut -d ':' -f 3-)
      args+=("$tag" "$item")
   done < <( grep -nrPe $1 ${2:-.} )

   exec 3>&1
   result=$(dialog --menu "Please select the file" 0 0 0 "${args[@]}" 2>&1 1>&3)
   exitcode=$?
   [[ $exitcode -eq 0 ]] && open_vim "$result"

   while [[ $exitcode -eq 0 ]]
   do
      result=$(dialog --default-item "$result" --menu "Please select the file" 0 0 0 "${args[@]}" 2>&1 1>&3)
      exitcode=$?
      [[ $exitcode -eq 0 ]] && open_vim "$result"
   done
   exec 3>&-
   clear
}


#To run probcli from sources:
alias probsli='rlwrap sicstus -l $PROB_SOURCE_DIR/prob_cli.pl --goal "go_cli." -a'

#To run probcli with the REPL from sources:
#alias seval='cd $NEWPROBDIR; rlwrap sicstus -l $PROB_SOURCE_DIR/prob_cli.pl --goal "go_cli." -a -repl -init -p WARN_WHEN_EXPANDING_INFINITE_CLOSURES 0 -p CLPFD TRUE'

#To run ProB Tcl/Tk from sources:
alias prob='cd $PROB_SOURCE_DIR; unlimit; sics -Dprob_profile=true -l $PROB_SOURCE_DIR/prob_tcltk.pl --goal "go."'

#To run the ProB Test REPL from sources:
#alias test='cd $PROB_SOURCE_DIR/..; rlwrap sicstus -Dprob_safe_mode=true -l $PROB_SOURCE_DIR/test_runner.pl --goal "test_repl."'


